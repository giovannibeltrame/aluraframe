{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","onerror","console","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement","Reflect","apply"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AAEXC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCAECC,iB;AAET,6CAAc;AAAA;;AACV,0BAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;;;oDAEsB;;AAEnB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,aAAK;AAC/BT,kDAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,6BAFD;;AAIAR,wCAAYS,SAAZ,GAAwB,aAAK;AACzB,oCAAI,CAAChB,UAAL,EAAiB;AACbA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,4CAAQD,WAAWC,KAAnB;AACAD,+CAAWC,KAAX,GAAmB,YAAW;AAC1B,8CAAM,IAAIE,KAAJ,CAAU,6CAAV,CAAN;AACH,qCAFD;AAGH;AACDE,wCAAQL,UAAR;AACH,6BATD;;AAWAO,wCAAYU,OAAZ,GAAsB,aAAK;AACvBC,wCAAQC,KAAR,CAAcN,EAAEC,MAAF,CAASK,KAAvB;AACAb,uCAAOO,EAAEC,MAAF,CAASK,KAAT,CAAeC,IAAtB;AACH,6BAHD;AAIH,yBAtBM,CAAP;AAwBH;;;kDAEoBpB,U,EAAY;AAC7BH,+BAAOwB,OAAP,CAAe,iBAAS;AACpB,gCAAIrB,WAAWsB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiD;AAC7CxB,2CAAWyB,iBAAX,CAA6BD,KAA7B;AACH;AACDxB,uCAAW0B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH,yBALD;AAMH;;;sDAEwB;AACrB,4BAAI3B,UAAJ,EAAgB;AACZ4B,oCAAQC,KAAR,CAAc5B,KAAd,EAAqBD,UAArB,EAAiC,EAAjC;AACAA,yCAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes'];\r\nconst version = 4;\r\nconst dbName = 'aluraframe';\r\n\r\nlet connection = null;\r\nlet close = null;\r\n\r\nexport class ConnectionFactory {\r\n\r\n    constructor() {\r\n        throw new Error('Não é possível criar instâncias de ConnectionFactory');\r\n    }\r\n\r\n    static getConnection() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n            let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n            openRequest.onupgradeneeded = e => {\r\n                ConnectionFactory._createStores(e.target.result);\r\n            }\r\n\r\n            openRequest.onsuccess = e => {\r\n                if (!connection) {\r\n                    connection = e.target.result;\r\n                    close = connection.close;\r\n                    connection.close = function() {\r\n                        throw new Error('Você não pode fechar direatamente a conexão');\r\n                    }\r\n                }\r\n                resolve(connection);\r\n            }\r\n\r\n            openRequest.onerror = e => {\r\n                console.error(e.target.error);\r\n                reject(e.target.error.name);\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    static _createStores(connection) {\r\n        stores.forEach(store => {\r\n            if (connection.objectStoreNames.contains(store)) {\r\n                connection.deleteObjectStore(store);\r\n            }\r\n            connection.createObjectStore(store, { autoIncrement: true });\r\n        })\r\n    }\r\n\r\n    static closeConnection() {\r\n        if (connection) {\r\n            Reflect.apply(close, connection, []);\r\n            connection = null;\r\n        }\r\n    }\r\n}"]}